import java.util.*;

class HuffmanNode {

        int value;
        char key;

        HuffmanNode left;
        HuffmanNode right;
        }

// comparator class helps to compare the node 
// on the basis of one of its attribute. 
// Here we will be compared 
// on the basis of value values of the nodes.
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y)
    {

        return x.value - y.value;
    }
}

public class Huffman {

    // recursive function to print the 
    // huffman-code through the tree traversal. 
    // Here s is the huffman - code generated.
//    static ArrayList keys =new ArrayList();
//    static ArrayList values = new ArrayList();
    static HashMap<Character, String> tree = new HashMap<Character, String>();
    public static void printCode(HuffmanNode root, String s)
    {

        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.left
                == null
                && root.right
                == null
                ) {

            // key is the character in the node
//            keys.add(root.key);
//            values.add(s);
            tree.put(root.key,s);
            System.out.println(root.key + ":" + s);

            return;
        }

        // if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 

        // recursive calls for left and 
        // right sub-tree of the generated tree. 
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    // main function 
    public static void main(String[] args)
    {

        Scanner s = new Scanner(System.in);

        // number of characters. 
        int n = 28;
        char[] charArray = {'J','K','P','Q','V','Y','C','L','M','X','Z','D','F','H','U','S','W','N','B','E','I','R','G','T','O','A',' ',','};
        int[] charfreq = { 1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,5,6,8,8,8,8,9,9,12,14,39,39};

        // creating a priority queue q. 
        // makes a min-priority queue(min-heap). 
        PriorityQueue<HuffmanNode> q
                = new PriorityQueue<HuffmanNode>(n, new MyComparator());

        for (int i = 0; i < n; i++) {

            // creating a huffman node object 
            // and adding it to the priority-queue. 
            HuffmanNode hn = new HuffmanNode();

            hn.key = charArray[i];
            hn.value = charfreq[i];

            hn.left = null;
            hn.right = null;

            // add functions adds 
            // the huffman node to the queue. 
            q.add(hn);
        }

        // create a root node 
        HuffmanNode root = null;

        // Here we will extract the two minimum value 
        // from the heap each time until 
        // its size reduces to 1, extract until 
        // all the nodes are extracted. 
        while (q.size() > 1) {

            // first min extract. 
            HuffmanNode x = q.peek();
            q.poll();

            // second min extarct. 
            HuffmanNode y = q.peek();
            q.poll();

            // new node newHffmanNode which is equal
            HuffmanNode newHffmanNode = new HuffmanNode();

            // to the sum of the frequency of the two nodes 
            // assigning values to the newHffmanNode node.
            newHffmanNode.value = x.value + y.value;
            newHffmanNode.key = '-';

            // first extracted node as left child. 
            newHffmanNode.left = x;

            // second extracted node as the right child. 
            newHffmanNode.right = y;

            // marking the newHffmanNode node as the root node.
            root = newHffmanNode;

            // add this node to the priority-queue. 
            q.add(newHffmanNode);
        }

        // print the codes by traversing the tree 
        printCode(root, "");

        String incode = "YOU GOT TO HAVE FUN BUT YOU NEED TO KNOW HOW SAID THE CAT IN THE HAT";
        String codes = "";
        for(int i=0;i<incode.length();i++){
            char ch = incode.charAt(i);
            codes +=tree.get(ch);
        }
        System.out.print(codes);

    }
} 